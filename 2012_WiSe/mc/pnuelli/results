Zum Zugang zur richtigen Datei muss man nur die entsprechend kommentierten Zeilen
im Quellcode ein-/auskommentieren.


Implementierung (Singel-step assign & keine Fairness)
-- specification AG (EX TRUE)  is true
-- specification EF !(pnu1.pc = criticle & pnu2.pc = criticle)  is true
-- specification AG !(pnu1.pc = criticle & pnu2.pc = criticle)  is true
-- specification AG (pnu1.pc = entering -> AF pnu1.pc = criticle)  is false
-- as demonstrated by the following execution sequence
Trace Description: CTL Counterexample 
Trace Type: Counterexample 
-> State: 1.1 <-
  s = FALSE
  y1 = FALSE
  y2 = FALSE
  pnu1.pc = idle
  pnu2.pc = idle
-> Input: 1.2 <-
  _process_selector_ = pnu1
  running = FALSE
  pnu2.running = FALSE
  pnu1.running = TRUE
-> State: 1.2 <-
  pnu1.pc = set
-> Input: 1.3 <-
-- Loop starts here
-> State: 1.3 <-
  y1 = TRUE
  pnu1.pc = entering
-> Input: 1.4 <-
  _process_selector_ = pnu2
  pnu2.running = TRUE
  pnu1.running = FALSE
-> State: 1.4 <-
-- specification EG ((pnu2.pc = entering & pnu1.pc = criticle) -> AX A [ pnu2.pc != criticle U pnu2.pc = criticle ] )  is true
-- specification AG ((pnu2.pc = entering & pnu1.pc = criticle) -> AX A [ pnu2.pc != criticle U pnu2.pc = criticle ] )  is false
-- as demonstrated by the following execution sequence
Trace Description: CTL Counterexample 
Trace Type: Counterexample 
-> State: 2.1 <-
  s = FALSE
  y1 = FALSE
  y2 = FALSE
  pnu1.pc = idle
  pnu2.pc = idle
-> Input: 2.2 <-
  _process_selector_ = pnu1
  running = FALSE
  pnu2.running = FALSE
  pnu1.running = TRUE
-> State: 2.2 <-
  pnu1.pc = set
-> Input: 2.3 <-
-> State: 2.3 <-
  y1 = TRUE
  pnu1.pc = entering
-> Input: 2.4 <-
  _process_selector_ = pnu2
  pnu2.running = TRUE
  pnu1.running = FALSE
-> State: 2.4 <-
  pnu2.pc = set
-> Input: 2.5 <-
-> State: 2.5 <-
  s = TRUE
  y2 = TRUE
  pnu2.pc = entering
-> Input: 2.6 <-
  _process_selector_ = pnu1
  pnu2.running = FALSE
  pnu1.running = TRUE
-- Loop starts here
-> State: 2.6 <-
  pnu1.pc = criticle
-> Input: 2.7 <-
  _process_selector_ = pnu2
  pnu2.running = TRUE
  pnu1.running = FALSE
-- Loop starts here
-> State: 2.7 <-
-> Input: 2.8 <-
-> State: 2.8 <-

Erklärung:
	In beiden Fällen liegt der Fehler daran, dass ein Prozess (im ersten Fall der 2. und im zweiten Fall der 1.) in der CS ist
	und danach nicht mehr weiter ausführt. Da der Mutual Exclusion Test durchlief, sollte unserm Programm sicher sein. So kann
	der zu erst genannte Prozess aber nie in die CS und damit sind beide Bedingungen falsch.

Implementierung (Single-step & Fairness)

-- specification AG (EX TRUE)  is true
-- specification EF !(pnu1.pc = criticle & pnu2.pc = criticle)  is true
-- specification AG !(pnu1.pc = criticle & pnu2.pc = criticle)  is true
-- specification AG (pnu1.pc = entering -> AF pnu1.pc = criticle)  is true
-- specification EG ((pnu2.pc = entering & pnu1.pc = criticle) -> AX A [ pnu2.pc != criticle U pnu2.pc = criticle ] )  is true
-- specification AG ((pnu2.pc = entering & pnu1.pc = criticle) -> AX A [ pnu2.pc != criticle U pnu2.pc = criticle ] )  is true

Erklärung:
	Nun fällt der Fehler weg, dass ein Prozess in der CS bleiben kann. Alle unsere Eigenschaften sind erfüllt.

Implementierung (Two-step := s first)

-- specification AG (EX TRUE)  is true
-- specification EF !(pnu1.pc = criticle & pnu2.pc = criticle)  is true
-- specification AG !(pnu1.pc = criticle & pnu2.pc = criticle)  is false
-- as demonstrated by the following execution sequence
Trace Description: CTL Counterexample 
Trace Type: Counterexample 
-> State: 1.1 <-
  s = FALSE
  y1 = FALSE
  y2 = FALSE
  pnu1.pc = idle
  pnu2.pc = idle
-> Input: 1.2 <-
  _process_selector_ = pnu2
  running = FALSE
  pnu2.running = TRUE
  pnu1.running = FALSE
-> State: 1.2 <-
  pnu2.pc = set
-> Input: 1.3 <-
-> State: 1.3 <-
  s = TRUE
  pnu2.pc = set2
-> Input: 1.4 <-
  _process_selector_ = pnu1
  pnu2.running = FALSE
  pnu1.running = TRUE
-> State: 1.4 <-
  pnu1.pc = set
-> Input: 1.5 <-
-> State: 1.5 <-
  s = FALSE
  pnu1.pc = set2
-> Input: 1.6 <-
-> State: 1.6 <-
  y1 = TRUE
  pnu1.pc = entering
-> Input: 1.7 <-
-> State: 1.7 <-
  pnu1.pc = criticle
-> Input: 1.8 <-
  _process_selector_ = pnu2
  pnu2.running = TRUE
  pnu1.running = FALSE
-> State: 1.8 <-
  y2 = TRUE
  pnu2.pc = entering
-> Input: 1.9 <-
-> State: 1.9 <-
  pnu2.pc = criticle
-- specification AG (pnu1.pc = entering -> AF pnu1.pc = criticle)  is true
-- specification EG ((pnu2.pc = entering & pnu1.pc = criticle) -> AX A [ pnu2.pc != criticle U pnu2.pc = criticle ] )  is true
-- specification AG ((pnu2.pc = entering & pnu1.pc = criticle) -> AX A [ pnu2.pc != criticle U pnu2.pc = criticle ] )  is true

Erklärung:
	Wir setzten nun s zuerst. Der Fehler der ist der folgende:	
	pnu1 setzt s (sperrt sich aus),
	pnu2 setzt s (sperrt sich aus, lässt pnu1 rein),
	pnu2 setzt y[1]
	pnu2 geht in die CS, da (y[0] unten ist)
	pnu1 setzt y[0]
	pnu1 geht in die CS, da (s so gesetzt ist)
	

Implementierung (Two-step)
-- specification AG (EX TRUE)  is true
-- specification EF !(pnu1.pc = criticle & pnu2.pc = criticle)  is true
-- specification AG !(pnu1.pc = criticle & pnu2.pc = criticle)  is true
-- specification AG (pnu1.pc = entering -> AF pnu1.pc = criticle)  is true
-- specification EG ((pnu2.pc = entering & pnu1.pc = criticle) -> AX A [ pnu2.pc != criticle U pnu2.pc = criticle ] )  is true
-- specification AG ((pnu2.pc = entering & pnu1.pc = criticle) -> AX A [ pnu2.pc != criticle U pnu2.pc = criticle ] )  is true

Erklärung:
	Nun existiert der Fehler nicht mehr. Da dieses Vorbeiziehen nicht mehr möglich ist. Sonst geht auch nichts schief sagt der Modelchecker.
