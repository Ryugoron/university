#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Technische Informatik IV: Praktikum
\end_layout

\begin_layout Author
Protokoll zu Aufgabe A12
\end_layout

\begin_layout Date
Max Wisniewski, Alexander Steen
\end_layout

\begin_layout Subsection*
Vorbereitung
\end_layout

\begin_layout Standard
Zur Vorbereitung haben wir den Abschnitt Socket Layer des WIP Development
 Guide gelesen und die Datei tcp.c aus dem Rahmenwerk studiert.
 Um die GPRS-Funktionalitäten nutzen zu können, wurde in der config.h INIT_GPRS
 aktiviert und dann ein clean build des Projekts gemacht.
\end_layout

\begin_layout Subsection*
Aufgaben
\end_layout

\begin_layout Enumerate
Befehl AT+ECHO erstellen
\end_layout

\begin_layout Enumerate
Erweitern, sodass Tastenbetätigungen via TCP verschickt werden
\end_layout

\begin_layout Subsection*
Dokumentation
\end_layout

\begin_layout Description
wip_TCPClientCreateOpts
\end_layout

\begin_layout Description
wip_read
\end_layout

\begin_layout Description
wip_write
\end_layout

\begin_layout Subsection*
Durchführung und Auswertung
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void main_task(void) {
\end_layout

\begin_layout Plain Layout

	channel_open = false;
\end_layout

\begin_layout Plain Layout

	adl_atCmdSubscribe("AT+ECHO", echoHandler,
\end_layout

\begin_layout Plain Layout

					ADL_CMD_TYPE_PARA | 0x0011); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void echoHandler(adl_atCmdPreParser_t *param) { 
\end_layout

\begin_layout Plain Layout

	if (param->Type == ADL_CMD_TYPE_PARA) {
\end_layout

\begin_layout Plain Layout

		wm_strGetParameterString(sendbuffer, param->StrData, 1);
\end_layout

\begin_layout Plain Layout

		// Socket erstellen
\end_layout

\begin_layout Plain Layout

		if(!channel_open){
\end_layout

\begin_layout Plain Layout

			channel = wip_TCPClientCreateOpts (
\end_layout

\begin_layout Plain Layout

						"hwp.mi.fu-berlin.de",	// Host
\end_layout

\begin_layout Plain Layout

						50008,					// Port
\end_layout

\begin_layout Plain Layout

						echo_response,			// Handler
\end_layout

\begin_layout Plain Layout

						NULL, 
\end_layout

\begin_layout Plain Layout

						WIP_COPT_PORT, 13338,
\end_layout

\begin_layout Plain Layout

						WIP_COPT_END);
\end_layout

\begin_layout Plain Layout

		}else{
\end_layout

\begin_layout Plain Layout

			wip_write(channel, sendbuffer, 256);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		adl_atSendResponse(ADL_AT_RSP, "
\backslash
r
\backslash
nOK
\backslash
r
\backslash
n");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

wip_channel_t channel;
\end_layout

\begin_layout Plain Layout

ascii sendbuffer[256];
\end_layout

\begin_layout Plain Layout

bool channel_open;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void echo_response(wip_event_t *event, void *ctx){
\end_layout

\begin_layout Plain Layout

	s32 answer;
\end_layout

\begin_layout Plain Layout

	ascii buffer[256];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	switch(event->kind){
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_OPEN:
\end_layout

\begin_layout Plain Layout

			channel_open = true;
\end_layout

\begin_layout Plain Layout

			wip_write(channel, sendbuffer, 256);
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_READ:
\end_layout

\begin_layout Plain Layout

			do	{
\end_layout

\begin_layout Plain Layout

				answer = wip_read (event->channel, buffer, sizeof (buffer) - 1);
\end_layout

\begin_layout Plain Layout

				buffer[answer] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

				// Terminieren, falls es ein String ist
\end_layout

\begin_layout Plain Layout

				adl_atSendResponse(ADL_AT_RSP,buffer);
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			while (answer == sizeof (buffer) - 1);
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_WRITE:
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_PEER_CLOSE:
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_ERROR:
\end_layout

\begin_layout Plain Layout

			wip_close(channel);
\end_layout

\begin_layout Plain Layout

			channel_open = false;
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		default:
\end_layout

\begin_layout Plain Layout

			wip_close(channel);
\end_layout

\begin_layout Plain Layout

			channel_open = false;
\end_layout

\begin_layout Plain Layout

			ERROR("ERROR: Unkown TCP Event");
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

bool keyhandler(adl_atUnsolicited_t *paras) {
\end_layout

\begin_layout Plain Layout

	ascii param1[1];
\end_layout

\begin_layout Plain Layout

	// parameter auslesen
\end_layout

\begin_layout Plain Layout

	wm_strGetParameterString(param1, paras->StrData, 1);
\end_layout

\begin_layout Plain Layout

	wm_sprintf(sendbuffer, "Taste %s",param1);
\end_layout

\begin_layout Plain Layout

	if(!channel_open){
\end_layout

\begin_layout Plain Layout

			channel = wip_TCPClientCreateOpts (
\end_layout

\begin_layout Plain Layout

						"hwp.mi.fu-berlin.de",	// Host
\end_layout

\begin_layout Plain Layout

						50008,					// Port
\end_layout

\begin_layout Plain Layout

						echo_response,			// Handler
\end_layout

\begin_layout Plain Layout

						NULL, 
\end_layout

\begin_layout Plain Layout

						WIP_COPT_PORT, 13338,
\end_layout

\begin_layout Plain Layout

						WIP_COPT_END);
\end_layout

\begin_layout Plain Layout

	}else{
\end_layout

\begin_layout Plain Layout

		wip_write(channel, sendbuffer, 256);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return FALSE;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\end_body
\end_document
