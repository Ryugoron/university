/************************************************************************************************
 * MAIN																							*
 ************************************************************************************************
 * Einstiegspunkte der Anwendung																*
 ************************************************************************************************/
#include "main.h"

//____DEKLARATIONEN______________________________________________________________________________
void main_task(void);
void sub_task1(void);
void echo_response(wip_event_t *event, void *ctx);
void updateStatus(ascii * stat);
//____VARIABLEN__________________________________________________________________________________
wip_channel_t channel;
ascii sendbuffer[12];
u8 status[8];
//____FUNKTIONEN_________________________________________________________________________________

void echo_response(wip_event_t *event, void *ctx)
	{
	s32 answer;
	ascii buffer[12];

	switch (event->kind)
		{
		case WIP_CEV_OPEN:
			break;
		case WIP_CEV_READ:
			do
				{
				answer = wip_read(event->channel, buffer, sizeof(buffer) - 1);
				buffer[answer] = '\0'; // Terminieren, falls es ein String ist
				adl_atSendResponse(ADL_AT_RSP, buffer);
				updateStatus(buffer);
				}
			while (answer == sizeof(buffer) - 1);
			break;
		case WIP_CEV_WRITE:
			break;
		default:
			wip_close(channel);
			ERROR("ERROR");
			break;
		}
	}

void useStatus(){
	u8 i;
	for(i = 0; i<4; ++i){
		if(status[i] == 1) led_on(i);
		else led_off(i);
	}
}

void updateStatus(ascii * stat)
	{
	if (wm_strncmp(stat, "SET:", 4) != 0)
		{
		return;
		}
	u8 i;
	adl_atSendResponse(ADL_AT_RSP,"\r\nneuer status:\r\n");
	for (i = 0; i < 8; ++i)
		{
		if (wm_strncmp(stat + 4 + i, "1", 1) == 0)
			{
			status[i] = 1;
			adl_atSendResponse(ADL_AT_RSP,"1");
			}
		else if (wm_strncmp(stat + 4 + i, "0", 1) == 0)
			{
			status[i] = 0;
			adl_atSendResponse(ADL_AT_RSP,"0");
			}
		}
	adl_atSendResponse(ADL_AT_RSP,"\r\n");
	useStatus();
	}

bool keyhandler(adl_atUnsolicited_t *paras)
	{
	ascii tasteStr[2];
	ascii tasteFirst[2];
	ascii statusStr[2];
	// parameter auslesen
	wm_strGetParameterString(tasteStr, paras->StrData, 1);
	wm_strncpy(tasteFirst,tasteStr,1);
	wm_strGetParameterString(statusStr, paras->StrData, 2);
	adl_atSendResponse(ADL_AT_RSP, "\r\nTaste ");
	adl_atSendResponse(ADL_AT_RSP, tasteFirst);
	adl_atSendResponse(ADL_AT_RSP, " wurde  auf ");
	adl_atSendResponse(ADL_AT_RSP, statusStr);
	adl_atSendResponse(ADL_AT_RSP, " gesetzt\r\n");
	status[wm_atoi(tasteStr)+4] = wm_atoi(statusStr);

	wm_sprintf(sendbuffer, "SET:%d%d%d%d%d%d%d%d", status[0], status[1], status[2], status[3],
		status[4], status[5], status[6], status[7]);
	adl_atSendResponse(ADL_AT_RSP, sendbuffer);
	wip_write(channel, sendbuffer, 12);
	return FALSE;
	}

/*
 * Hauptask der Anwendung (volle ADL Funktionalität)
 */
//===============================================================================================
void main_task(void)
//===============================================================================================
	{
	led_init();
	u8 i;
	for (i = 0; i < 8; ++i)
		{
		status[i] = 0;
		}

	channel = wip_TCPClientCreateOpts("hwp.mi.fu-berlin.de", // Host
		50008, // Port
		echo_response, // Handler
		NULL, WIP_COPT_PORT, 13338, WIP_COPT_END);

	// keymeldungen aktivieren
	adl_atCmdCreate("AT+CMER=,1", FALSE, (adl_atRspHandler_t) NULL, NULL);
	// keyhandler anlegen
	adl_atUnSoSubscribe("+CKEV:", (adl_atUnSoHandler_t) keyhandler);
	}

/*
 * Nebenläufiger Task der Anwendung (eingeschränkte ADL Funktionalität)
 */
//===============================================================================================
void sub_task1(void)
//===============================================================================================
	{
	// Anwendercode ...
	}
