#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Technische Informatik IV : Praktikum
\end_layout

\begin_layout Author
Protokoll zu Aufgabe A13
\end_layout

\begin_layout Date
von Alexander Steen, Max Wisniewski
\end_layout

\begin_layout Subsection*
Vorbereitung
\end_layout

\begin_layout Standard
In dieser Übung kamen keine neuen Befehle hinzu.
 Wir haben uns in Aufgabe 
\emph on
A12
\emph default
 schon mit dem 
\emph on
WIP Development Guide
\emph default
 im Bereich 
\emph on
TCPCLientSockets
\emph default
 beschäftigt.
 Die Steuerung der 
\series bold
LEDs
\series default
 und Taster haben wir schon in vorherigen Aufgaben erledigt.
 Wir werden hier trotzdem nochmal die Befehle auflisten, die wir verwendet
 haben, aber im Gegensatz zur erstmaligen Beutzung nicht nochmal alles im
 Detail beschreiben.
\end_layout

\begin_layout Subsection*
Aufgaben
\end_layout

\begin_layout Itemize
Die Zustandsänderung eines Tasters (Taster0...Taster3) soll an einen Webserver
 übertragen werden.
 Der Server ist 
\series bold
hwp.mi.fu-berlin.de.

\series default
 Genutzt werden die Ports 
\series bold
50001...50009
\series default
.
 Die Zuordnung der Ports zu den Arbeitsplätzen ist
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
50008 : HWP8
\end_layout

\end_deeper
\begin_layout Itemize
Für die Gruppen: ...
 
\series bold
HWP8
\series default
....
 wird die Zustandsänderung auf den verlinkten HTML-Formularen sichtbar gemacht.
 Zur Aktualisierung der Anzeige drücken sie [F5].
 User und Passwort sind mit dem Praktikumszugang identisch.
\end_layout

\begin_layout Itemize
Die vom Modul über die TCP-Verbinung zu verschickende Zeichenkette muss
 folgendes Format haben:
\begin_inset Newline newline
\end_inset


\series bold
SET:<LED0><LED1><LED2><LED3><Taste0><Taste1><Taste2><Taste3>
\begin_inset Newline newline
\end_inset


\series default
z.B.: 
\series bold
SET:00010111
\series default
; (0-Aus, 1-Ein)
\end_layout

\begin_layout Itemize
Wird im HTML-Formular die Taste Senden gedrückt, werden die Eingaben aus
 dem Formular in einer Zeichenkette(wie oben erläutert) an das Modul zuückgeschi
ckt.
\end_layout

\begin_layout Itemize
Werten Sie die empfangene Zeichenkette aus und setzten Sie den Zustand der
 LEDs entsprechend um.
\end_layout

\begin_layout Itemize
Bitte besuchen Sie nur ihre Seite, damit die anderen Gruppen nicht gestört
 werden.
\end_layout

\begin_layout Subsection*
Dokumentation
\end_layout

\begin_layout Description
wip_read liest aus einem Socket eine Festgelegte Anzah von Bytes in einen
 Buffer
\begin_inset Newline newline
\end_inset

wip_read(Socket* s, ascii* buffer, u16 size).
 [Socket steht hier stellvertretend für das struct eines Sockets)
\end_layout

\begin_layout Description
wip_write schreibt eine Nachricht mit angegebener Anzahl von Bytes auf ein
 Socket.
 Diese wird dann raus geschickt.
\begin_inset Newline newline
\end_inset

wip_write(Socket* s, ascii* buffer, u16 size).
\end_layout

\begin_layout Description
wi_close Schließt ein TCPSocket wieder.
\begin_inset Newline newline
\end_inset

wip_close(Socket* s);
\end_layout

\begin_layout Description
wip_TCPClientCreateOpts erstellt ein neues TCP Clienten Socket.
 Die optionale Variante ist von nöten, da das Socket sonst nicht automatisch
 gebindet wird.
\end_layout

\begin_layout Description
adl_atCmdCreate führt ein ATCommando aus, wie man es auf der Commandozeile
 auch eintragen kann
\end_layout

\begin_layout Description
adl_atUnSoSubscribe registriert einen Handler auf ein Unsolicid Responses.
 Die meisten werden auf AT Commandos als Antwort geworfen.
\end_layout

\begin_layout Subsection*
Durchführung
\end_layout

\begin_layout Subsection*
Auswertung
\end_layout

\end_body
\end_document
