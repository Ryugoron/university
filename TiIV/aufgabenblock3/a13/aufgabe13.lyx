#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Technische Informatik IV : Praktikum
\end_layout

\begin_layout Author
Protokoll zu Aufgabe A13
\end_layout

\begin_layout Date
von Alexander Steen, Max Wisniewski
\end_layout

\begin_layout Subsection*
Vorbereitung
\end_layout

\begin_layout Standard
In dieser Übung kamen keine neuen Befehle hinzu.
 Wir haben uns in Aufgabe 
\emph on
A12
\emph default
 schon mit dem 
\emph on
WIP Development Guide
\emph default
 im Bereich 
\emph on
TCPCLientSockets
\emph default
 beschäftigt.
 Die Steuerung der 
\series bold
LEDs
\series default
 und Taster haben wir schon in vorherigen Aufgaben erledigt.
 Wir werden hier trotzdem nochmal die Befehle auflisten, die wir verwendet
 haben, aber im Gegensatz zur erstmaligen Beutzung nicht nochmal alles im
 Detail beschreiben.
\end_layout

\begin_layout Subsection*
Aufgaben
\end_layout

\begin_layout Itemize
Die Zustandsänderung eines Tasters (Taster0...Taster3) soll an einen Webserver
 übertragen werden.
 Der Server ist 
\series bold
hwp.mi.fu-berlin.de.

\series default
 Genutzt werden die Ports 
\series bold
50001...50009
\series default
.
 Die Zuordnung der Ports zu den Arbeitsplätzen ist
\end_layout

\begin_deeper
\begin_layout Itemize

\series bold
50008 : HWP8
\end_layout

\end_deeper
\begin_layout Itemize
Für die Gruppen: ...
 
\series bold
HWP8
\series default
....
 wird die Zustandsänderung auf den verlinkten HTML-Formularen sichtbar gemacht.
 Zur Aktualisierung der Anzeige drücken sie [F5].
 User und Passwort sind mit dem Praktikumszugang identisch.
\end_layout

\begin_layout Itemize
Die vom Modul über die TCP-Verbinung zu verschickende Zeichenkette muss
 folgendes Format haben:
\begin_inset Newline newline
\end_inset


\series bold
SET:<LED0><LED1><LED2><LED3><Taste0><Taste1><Taste2><Taste3>
\begin_inset Newline newline
\end_inset


\series default
z.B.: 
\series bold
SET:00010111
\series default
; (0-Aus, 1-Ein)
\end_layout

\begin_layout Itemize
Wird im HTML-Formular die Taste Senden gedrückt, werden die Eingaben aus
 dem Formular in einer Zeichenkette(wie oben erläutert) an das Modul zuückgeschi
ckt.
\end_layout

\begin_layout Itemize
Werten Sie die empfangene Zeichenkette aus und setzten Sie den Zustand der
 LEDs entsprechend um.
\end_layout

\begin_layout Itemize
Bitte besuchen Sie nur ihre Seite, damit die anderen Gruppen nicht gestört
 werden.
\end_layout

\begin_layout Subsection*
Dokumentation
\end_layout

\begin_layout Description
wip_read liest aus einem Socket eine Festgelegte Anzah von Bytes in einen
 Buffer
\begin_inset Newline newline
\end_inset

wip_read(Socket* s, ascii* buffer, u16 size).
 [Socket steht hier stellvertretend für das struct eines Sockets)
\end_layout

\begin_layout Description
wip_write schreibt eine Nachricht mit angegebener Anzahl von Bytes auf ein
 Socket.
 Diese wird dann raus geschickt.
\begin_inset Newline newline
\end_inset

wip_write(Socket* s, ascii* buffer, u16 size).
\end_layout

\begin_layout Description
wi_close Schließt ein TCPSocket wieder.
\begin_inset Newline newline
\end_inset

wip_close(Socket* s);
\end_layout

\begin_layout Description
wip_TCPClientCreateOpts erstellt ein neues TCP Clienten Socket.
 Die optionale Variante ist von nöten, da das Socket sonst nicht automatisch
 gebindet wird.
\end_layout

\begin_layout Description
adl_atCmdCreate führt ein ATCommando aus, wie man es auf der Commandozeile
 auch eintragen kann
\end_layout

\begin_layout Description
adl_atUnSoSubscribe registriert einen Handler auf ein Unsolicid Responses.
 Die meisten werden auf AT Commandos als Antwort geworfen.
\end_layout

\begin_layout Subsection*
Durchführung
\end_layout

\begin_layout Standard
Um das GPRS zu benutzen musste die Flag in 
\emph on
config.h
\emph default
 auf 1 gesetzt werden.
 Dies haben wir schon in Aufgabe 
\emph on
A12 
\emph default
eingeschaltet.
\begin_inset VSpace defskip
\end_inset

Wenn wir das Modul einschalten, ist das erste was wir tun müssen ein Socet
 zu erstellen und die Taster zu aktivieren:
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

//Globale Variablen
\end_layout

\begin_layout Plain Layout

wip_channel_t channel;
\end_layout

\begin_layout Plain Layout

ascii sendbuffer[12];
\end_layout

\begin_layout Plain Layout

u8 status[8];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

//Main
\end_layout

\begin_layout Plain Layout

void main(void){
\end_layout

\begin_layout Plain Layout

	led_init(); 
\end_layout

\begin_layout Plain Layout

	u8 i; 
\end_layout

\begin_layout Plain Layout

	for (i = 0; i < 8; ++i) {
\end_layout

\begin_layout Plain Layout

		status[i] = 0;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	channel = wip_TCPClientCreateOpts("hwp.mi.fu-berlin.de", // Host
\end_layout

\begin_layout Plain Layout

				50008, // Port 
\end_layout

\begin_layout Plain Layout

				echo_response, // Handler 
\end_layout

\begin_layout Plain Layout

				NULL, WIP_COPT_PORT, 13338, WIP_COPT_END);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	// keymeldungen aktivieren
\end_layout

\begin_layout Plain Layout

	adl_atCmdCreate("AT+CMER=,1", FALSE, (adl_atRspHandler_t) NULL, NULL);
\end_layout

\begin_layout Plain Layout

	// keyhandler anlegen 
\end_layout

\begin_layout Plain Layout

	adl_atUnSoSubscribe("+CKEV:", (adl_atUnSoHandler_t) keyhandler); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
In der main werden die beiden nötigen Eventhandler angelegt und sowohl LED
 als auch Taster aktiviert.
\end_layout

\end_inset


\end_layout

\end_inset

Nachdem wir nun alle Test, LEDs und Sockets angestellt haben, können wir
 uns um das Senden der Nachrichten an den Server kümmern.
 Im status (ganz oben) finden wir schon die Zahlen (0-Aus, 1-Ein), die wir
 an den Server schicken werden.
 Wir speichern dazu immer unseren jetzt Zustand zwischen und ändern nur
 das, wass wir von den Tasten oder vom Server gesagt bekommen.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Da wir nur senden sollen, wenn wir auf eine Taste gedrückt haben, ist die
 Logik des Sendens im keyhandler.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

bool keyhandler(adl_atUnsolicited_t *paras) 	{
\end_layout

\begin_layout Plain Layout

	ascii tasteStr[2];
\end_layout

\begin_layout Plain Layout

	ascii tasteFirst[2];
\end_layout

\begin_layout Plain Layout

	ascii statusStr[2];
\end_layout

\begin_layout Plain Layout

	// parameter auslesen
\end_layout

\begin_layout Plain Layout

	wm_strGetParameterString(tasteStr, paras->StrData, 1);
\end_layout

\begin_layout Plain Layout

	wm_strncpy(tasteFirst,tasteStr,1);
\end_layout

\begin_layout Plain Layout

	wm_strGetParameterString(statusStr, paras->StrData, 2);
\end_layout

\begin_layout Plain Layout

	adl_atSendResponse(ADL_AT_RSP, "
\backslash
r
\backslash
nTaste ");
\end_layout

\begin_layout Plain Layout

	adl_atSendResponse(ADL_AT_RSP, tasteFirst);
\end_layout

\begin_layout Plain Layout

	adl_atSendResponse(ADL_AT_RSP, " wurde  auf ");
\end_layout

\begin_layout Plain Layout

	adl_atSendResponse(ADL_AT_RSP, statusStr);
\end_layout

\begin_layout Plain Layout

	adl_atSendResponse(ADL_AT_RSP, " gesetzt
\backslash
r
\backslash
n");
\end_layout

\begin_layout Plain Layout

	status[wm_atoi(tasteStr)+4] = wm_atoi(statusStr);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	wm_sprintf(sendbuffer, "SET:%d%d%d%d%d%d%d%d", 
\end_layout

\begin_layout Plain Layout

		status[0], status[1], status[2], status[3],
\end_layout

\begin_layout Plain Layout

		status[4], status[5], status[6], status[7]);
\end_layout

\begin_layout Plain Layout

	adl_atSendResponse(ADL_AT_RSP, sendbuffer);
\end_layout

\begin_layout Plain Layout

	wip_write(channel, sendbuffer, 12);
\end_layout

\begin_layout Plain Layout

	return FALSE;
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Im Keyhandler wird nachgeguckt, welche Taste gedrückt wurde und der neue
 Status an den Server geschickt.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Der größte Teil, in dieser Funktion ist eine Statusausgabe auf der Konsole.
 Wir holen uns wie gewohnt von der Aufgabe mit den Tastern 
\emph on
A8
\emph default
 wissen den ersten Teil der Antwort herraus und kopieren davon den ersten
 Teil nochmal herraus.
 Dies ist nötig, da in der Antwort nach der ersten Zahl im String immer
 noch etwas stand, das nicht dort hin gehörte.
 Deswegen holen wir uns noch den ersten Teil davon herraus.
\end_layout

\begin_layout Standard
Im zweiten Teil steht nun der Status der Taste korrekt.
\begin_inset Newline newline
\end_inset

Nun parsen wir die Taste und den Status und schreiben das ganze in den status
 hinein.
 Die Plus 4 im Index verschiebt die Taste (0..3) auf die Korrekte Position
 (sie Protokollspezifikation in der Aufgabe).
\begin_inset VSpace defskip
\end_inset

Als nächstes betrachten wir die TCPHandler 
\emph on
echo_response
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void echo_response(wip_event_t *event, void *ctx) 	{
\end_layout

\begin_layout Plain Layout

	s32 answer;
\end_layout

\begin_layout Plain Layout

	ascii buffer[12];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	switch (event->kind) 		{
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_OPEN:
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_READ:
\end_layout

\begin_layout Plain Layout

			do 				{
\end_layout

\begin_layout Plain Layout

				answer=wip_read(event->channel, buffer, sizeof(buffer) - 1);
\end_layout

\begin_layout Plain Layout

				buffer[answer] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

			// Terminieren, falls es ein String ist
\end_layout

\begin_layout Plain Layout

				adl_atSendResponse(ADL_AT_RSP, buffer);
\end_layout

\begin_layout Plain Layout

				updateStatus(buffer);
\end_layout

\begin_layout Plain Layout

				}
\end_layout

\begin_layout Plain Layout

			while (answer == sizeof(buffer) - 1);
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_WRITE:
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		default:
\end_layout

\begin_layout Plain Layout

			wip_close(channel);
\end_layout

\begin_layout Plain Layout

			ERROR("ERROR");
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Der Handler echo_response achtet nur darauf, wenn etwas gesendet wurde.
 Sollte der Server den Channel beendet, wird das Socket geschlossen.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

Wir warten darauf, dass wir eine Nachricht über das Socket bekommen.
 Haben wir eine Nachricht im buffer, rufen wir die Funktion 
\emph on
updateStatus
\emph default
 auf.
 Der Handler macht an sich nicht mehr, außer auf ein schlileßen des Channels
 zu achten oder sonstige Fehler auf der Leitung.
 Betrachten wir nun 
\emph on
updateStatus
\emph default
 und innerhalb davon 
\emph on
useStatus
\emph default
.
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},numbers=left,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void useStatus(){
\end_layout

\begin_layout Plain Layout

	u8 i;
\end_layout

\begin_layout Plain Layout

	for(i = 0; i<4; ++i){
\end_layout

\begin_layout Plain Layout

		if(status[i] == 1) led_on(i);
\end_layout

\begin_layout Plain Layout

		else led_off(i);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void updateStatus(ascii * stat) 	{
\end_layout

\begin_layout Plain Layout

	if (wm_strncmp(stat, "SET:", 4) != 0) 		{
\end_layout

\begin_layout Plain Layout

		return;
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	u8 i;
\end_layout

\begin_layout Plain Layout

	adl_atSendResponse(ADL_AT_RSP,"
\backslash
r
\backslash
nneuer status:
\backslash
r
\backslash
n");
\end_layout

\begin_layout Plain Layout

	for (i = 0; i < 8; ++i) 		{
\end_layout

\begin_layout Plain Layout

		if (wm_strncmp(stat + 4 + i, "1", 1) == 0) 			{
\end_layout

\begin_layout Plain Layout

			status[i] = 1;
\end_layout

\begin_layout Plain Layout

			adl_atSendResponse(ADL_AT_RSP,"1");
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		else if (wm_strncmp(stat + 4 + i, "0", 1) == 0) 			{
\end_layout

\begin_layout Plain Layout

			status[i] = 0;
\end_layout

\begin_layout Plain Layout

			adl_atSendResponse(ADL_AT_RSP,"0");
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

	adl_atSendResponse(ADL_AT_RSP,"
\backslash
r
\backslash
n");
\end_layout

\begin_layout Plain Layout

	useStatus();
\end_layout

\begin_layout Plain Layout

} 
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Die beiden Funktionen, die ein über TCP empfangens Packet den Status anpassen.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset

In updateStatus parsen wir aus einem eingegebenen String Charweise den inhalt
 und schreiben den Inhalt in 
\emph on
status
\emph default
 hinein.
 Haben wir alle Änderungen eingetragen rufen wir 
\emph on
useStatus
\emph default
 auf, der dafür sorgt, dass alle LEDs (Tasten werden wir programmatisch
 nicht drücken können, deswegen werden diese ignoriert), die im 
\emph on
status
\emph default
 gesetzt sind ein geschaltet werden und die anderen aus.
\begin_inset VSpace defskip
\end_inset

Mit diesen einfachen Methoden können wir die geforderte Funktionalität umsetzen.
 Zum letzten Punkt der Aufgabe:
\end_layout

\begin_layout Standard
Haben wir nicht getan.
\end_layout

\begin_layout Standard
...
\end_layout

\begin_layout Standard
Ehrlich!
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection*
Auswertung
\end_layout

\begin_layout Standard
Wir haben als erstes einmal getestet ob unsere Taster den Status richtig
 verändern:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

+GPRS: Verbindung wurde hergestellt
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Taste 2 wurde  auf 1 gesetzt 
\end_layout

\begin_layout Plain Layout

SET:00000010 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Taste 2 wurde  auf 0 gesetzt 
\end_layout

\begin_layout Plain Layout

SET:00000000
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Taste 1 wurde  auf 1 gesetzt
\end_layout

\begin_layout Plain Layout

SET:00000100 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Taste 1 wurde  auf 0 gesetzt 
\end_layout

\begin_layout Plain Layout

SET:00000000
\end_layout

\end_inset

Wenn wir auf eine Taste gedrückt haben, ist die SET Nachricht korrekt verändert
 worden.
 HIer schlecht zu zeigen, aber im Browser war diese Veränderung auch sichtbar.
 Nach dem Drücken von [F5] waren die Checkboxen (warum waren es überhaupt
 Checkboxen, das macht gar keinen Sinn, da man Tasten nicht Remote setzen
 kann) der gedrückten Tasten angehakt.
\begin_inset VSpace defskip
\end_inset

Im nächsten Teil haben wir versucht die LEDs Remote zu setzen, dabei sahen
 wir auf dem Modul die richtigen LEDs aufleuchten und auf der Console
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single"
inline false
status open

\begin_layout Plain Layout

SET:01000100 // Empfangene Nachricht
\end_layout

\begin_layout Plain Layout

neuer status:01000100 //Gesetzter Status
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

SET:11110000 //Empfangene Nachricht
\end_layout

\begin_layout Plain Layout

neuer status:11110000 //Gesetzter Status
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

SET:10100101 //Empfangene Nachricht
\end_layout

\begin_layout Plain Layout

neuer status:10100101 //Gesetzter Status
\end_layout

\end_inset

Wir sehen, dass wir hier eine Nachricht empfangen vom Server und wenn wir
 alles geparst haben, ist unser neuer Status, der den wir in der Nachricht
 bekommen haben.
\end_layout

\begin_layout Standard
Das stimmt auch mit unseren Beobachtungen der LEDs überein.
\begin_inset VSpace defskip
\end_inset

Sonst gab es in dieser Aufgabe recht wenig zu beobachten.
\end_layout

\end_body
\end_document
