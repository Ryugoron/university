#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language ngerman
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Rechnersicherheit Übung 1
\end_layout

\begin_layout Author
Alexander Steen , Max Wisniewski
\end_layout

\begin_layout Date
Tutorium : Do 10 - 12
\end_layout

\begin_layout Standard
In unserem Programm haben wir zunächst die einfach Funktion 
\begin_inset Formula $f$
\end_inset

 geschrieben.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,numbers=left"
inline false
status open

\begin_layout Plain Layout

int f(int a, int b){
\end_layout

\begin_layout Plain Layout

  return a+b; 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dies erfüllt die Anforderungen an eine 
\emph on
einfache
\emph default
 Funktion und sie benutzt keine relativ addressierten Funktionen (wie printf),
 kann also nachher vom Heap ausgeführt werden.
\begin_inset VSpace defskip
\end_inset

Damit wir die Funktion leichter in den Heap laden können, legen wir direkt
 unter unsere Funktion noch eine leere 
\emph on
Dummyfunktion
\emph default
.
 Nun können wir uns die Differenz der beiden Funktoisnpointer betrachten
 und wissen daher, wie lang die Funktion 
\begin_inset Formula $f$
\end_inset

 ist.
\end_layout

\begin_layout Standard
Da die Funkionen am Anfang richtig herum in den Stack geladen werden, müssen
 wir von der Funktion 
\begin_inset Formula $g$
\end_inset

 (also der Addresse der Funktion) den der Funktion 
\begin_inset Formula $f$
\end_inset

 abziehen, da 
\begin_inset Formula $g$
\end_inset

 weiter unten eine höhere Nummer besitzt.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,numbers=left"
inline false
status open

\begin_layout Plain Layout

int func_size;
\end_layout

\begin_layout Plain Layout

int (*func_pointer)(int, int);
\end_layout

\begin_layout Plain Layout

char *function_dump;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

func_size = &g - &f;
\end_layout

\begin_layout Plain Layout

function_dump = (void *)malloc(func_size);   
\end_layout

\begin_layout Plain Layout

memcpy(function_dump, &f, func_size); 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

int i;
\end_layout

\begin_layout Plain Layout

printf ("Aus dem Heap:
\backslash
n");   
\end_layout

\begin_layout Plain Layout

for (i = 0; i < func_size; ++i){  
\end_layout

\begin_layout Plain Layout

 printf ("Adresse %p 
\backslash
t %#x 
\backslash
n",function_dump+i,
\end_layout

\begin_layout Plain Layout

			* ((unsigned char *)(function_dump+i)));   
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Haben wir die Länge, können wir uns mit 
\emph on
malloc
\emph default
 Speicher auf dem Heap reservieren und mit 
\emph on
memcpy
\emph default
 kopieren wir die Binärdaten der Funktion auf den Heap.
 Die größe stimmt mit der vorher ermittelten größe überein, da alle Befehle
 genau ein Byte einnehmen.
\end_layout

\begin_layout Standard
Nun können wir über unseren Speicher iterieren.
 Um die Darstellung korrekt in Hex auszugeben, müssen wir die Einträge auf
 
\emph on
unsignded char
\emph default
 casten, da die Darstellung sonst mehrer F's vor die eigentlichen Werte
 schreibt.
\begin_inset VSpace defskip
\end_inset

Wollen wir nun die Funktion ausführen, laden wir auf einen angelegten Funktionsp
ointer die Addresse Startaddresse des allokierten Speichers.
\end_layout

\begin_layout Standard
Damit das Aufgeht, müssen wir den Speicherpointer ersteinmal auf einen Funktions
pointer casten.
\end_layout

\begin_layout Standard
Haben wir das getan, können wir den Pointer wie bei einem normalen Funktionsaufr
uf benutzen.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,numbers=left"
inline false
status open

\begin_layout Plain Layout

func_pointer = (int (*)(int, int))function_dump;   
\end_layout

\begin_layout Plain Layout

int ergebnis = func_pointer(2,4);   
\end_layout

\begin_layout Plain Layout

printf("Ergebnis: %d
\backslash
n",ergebnis);
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Dies führt nun, wenn man es normal kompiliert, an dieser Stelle zu einem
 
\emph on
Segmentation Fault
\emph default
, da standardmäßig für den Heap ein 
\emph on
No-Execution-Bit
\emph default
 gesetzt ist.
\end_layout

\begin_layout Standard
Dies kann man leicht umgehen, indem man beim Kompilieren 
\emph on
gcc
\emph default
 den Parameter 
\emph on
-Wa,--execstack
\emph default
 mitgibt.
\begin_inset VSpace defskip
\end_inset

Einmal ausführen zeigte uns, dass der Hexcode demjenigen entspricht, den
 einem auch gdb ausgibt, wenn man den Code disassembled und in Hex ausgibt.
\end_layout

\begin_layout Standard
Das Ergebnis ist auch, wie erwartet 6.
 Das selbe hat uns auch ein normaler Aufruf von 
\begin_inset Formula $f$
\end_inset

 am Anfang der Entwicklung geliefert.
\end_layout

\end_body
\end_document
