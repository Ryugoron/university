#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language ngerman
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Stichwortverzeichnis
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Verteilte Systeme Übung 2
\end_layout

\begin_layout Author
Alexander Steen , Max Wisniewski
\end_layout

\begin_layout Date
Tutor : Philipp Schmidt
\end_layout

\begin_layout Standard
Unsere Implementierung benutzt für jedes Socket einen eigenen Thread.
 Dies ist keine besonders schöne Lösung und wird gerade bei hoher Belastung
 in die Knie gehen, aber für die einfachen Fälle, die wir hier behandelt
 haben, ist es völlig aureichend.
\end_layout

\begin_layout Standard
Kern dieser Lösung ist die Klasse ChannelFactory.
 In dieser erzeugen wir, wenn wir einen neuen Channel anfordern, zugleich
 einen 
\emph on
MessageDispatcher
\emph default
, der auf das Socket aufpasst.
\end_layout

\begin_layout Standard
Die private Methode ist synchronized, damit wir nicht ausversehen zwei Channels
 auf dem selben Port öffnen und da es gleichzeitig passiert zwei Dispatcher
 für diesen Socket anlegen.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,numbers=left"
inline false
status open

\begin_layout Plain Layout

private static synchronized UdpChannel createChannel(int local_port){
\end_layout

\begin_layout Plain Layout

		UdpChannel channel;
\end_layout

\begin_layout Plain Layout

		if (dispatcher.containsKey(local_port)) {
\end_layout

\begin_layout Plain Layout

			// port already exists, add new channel to according dispatcher
\end_layout

\begin_layout Plain Layout

			channel = new UdpChannel(dispatcher.get(local_port).socket);
\end_layout

\begin_layout Plain Layout

			MessageDispatcher m = dispatcher.get(local_port);
\end_layout

\begin_layout Plain Layout

			m.addUnconnectedChannel(channel);
\end_layout

\begin_layout Plain Layout

		} else {
\end_layout

\begin_layout Plain Layout

			// channel on new port, so create new dispatcher and socket
\end_layout

\begin_layout Plain Layout

			DatagramSocket newSock;
\end_layout

\begin_layout Plain Layout

			try {
\end_layout

\begin_layout Plain Layout

				newSock = new DatagramSocket(local_port);
\end_layout

\begin_layout Plain Layout

				channel = new UdpChannel(newSock);
\end_layout

\begin_layout Plain Layout

				MessageDispatcher m = new MessageDispatcher(newSock);
\end_layout

\begin_layout Plain Layout

				dispatcher.put(local_port, m);
\end_layout

\begin_layout Plain Layout

				m.start();
\end_layout

\begin_layout Plain Layout

			} catch (SocketException e) {
\end_layout

\begin_layout Plain Layout

				System.err.println("Socketcreation failed on port "
\end_layout

\begin_layout Plain Layout

						+ local_port + "
\backslash
n");
\end_layout

\begin_layout Plain Layout

				return null;
\end_layout

\begin_layout Plain Layout

			}
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		return channel;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Haben wir (1.
 Fall) schon einen 
\emph on
Dispatcher
\emph default
, der auf den Socket hört, so holen wir diesen uns aus einem Wörterbuch
 (das wir uns gespeichert haben) und stecken den neuen Channel in den 
\emph on
Dispatcher
\emph default
 hinein.
\end_layout

\begin_layout Standard
Haben wir noch keinen Dispatcher für den Socket, so legen wir uns einen
 neuen an und starten ihn.
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Da beide Factory Methoden anfänglich das gleiche tun (Channel anlegen und
 Dispatcher erzeugen/ermitteln) haben wir beides in eine private Methode
 ausgelagert.
 Ist der Channel nur mit 
\emph on
Port 
\emph default
erzeugt worden, so stecken wir ihn danach in die 
\emph on
unconnected
\emph default
 List rein.
 Haben wir den Endpunkt mitgegeben, stecken wir es in die verbundenen Endpunkte
 rein.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Der 
\emph on
Dispatcher
\emph default
 bekomt wie oben zu sehen ein Socket, auf das er achten muss.
 Nun fängt er an auf dem Socket zu lauschen.
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\footnotesize\ttfamily},frame=single,numbers=left"
inline false
status open

\begin_layout Plain Layout

this.socket.receive(incoming);
\end_layout

\begin_layout Plain Layout

InetSocketAddress from = new InetSocketAddress(incoming
\end_layout

\begin_layout Plain Layout

	.getAddress(), incoming.getPort());
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

if (!this.endpoints.containsKey(from)
\end_layout

\begin_layout Plain Layout

	&& this.unconnectedChannels.isEmpty()) {
\end_layout

\begin_layout Plain Layout

		continue;
\end_layout

\begin_layout Plain Layout

} else if (!this.endpoints.containsKey(from)
\end_layout

\begin_layout Plain Layout

	&& !this.unconnectedChannels.isEmpty()) {
\end_layout

\begin_layout Plain Layout

		UdpChannel toChannel = this.unconnectedChannels.poll();
\end_layout

\begin_layout Plain Layout

		toChannel.connect(from.getAddress(), from.getPort());
\end_layout

\begin_layout Plain Layout

		this.endpoints.put(from, toChannel);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Bekommen wir nun ein Packet, holen wir uns den Absender herraus.
 Ist der Absender noch nicht in unsere Liste drin, schauen wir nach ob noch
 ein unverbundener Channel wartet.
 Haben wir so einen gefunden, dann verbinden wir diesen Channel und geben
 ihm danach die Nachricht weiter.
\end_layout

\begin_layout Standard
Ist der schon verbunden, werden wir ihm einfach die Nachricht weiterleiten
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Wir haben für diesen Zweck eine neue Message Klasse erzeugt, damit wir die
 Bytearrays gesammelt weiter leiten können und nicht immer alle Bytes einzeln
 in die Messagequeue zu stecken.
\end_layout

\begin_layout Standard
Damit das Ganze funktioniert, müssen Senden und Empfangen auf dem Socket
 gleichzeitig funktionieren.
 Das wird uns von der API zugesichert und läuft in den Tests ganz gut.
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Der Channel hält dann eine Blockingqueue, in die der Dispatcher die Messages
 einträgt.
 Der Channel wird dann beim receive auf die Queue Blocken.
\end_layout

\begin_layout Standard
Will der Channel etwas senden, verpackt er seine Message einfach in ein
 UDP Packet und sendet es über das Socket an seinen connecteten Endpunkt.
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Description
Probleme
\end_layout

\begin_layout Standard
Unsere erstes Problem ist zur Zeit, dass wir eine maximale Packetgröße von
 512 Byte haben.
 Es gibt eine maximale Packetgröße in UPD, wir haben es jetzt erst einmal
 wahllos auf diesen Wert gesetzt.
 Wollten wir größere Packete schicken, müssten wir ein Protokoll entwickeln,
 dass Fragmentation implementiert (siehe TCP).
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Das nächste Problem, dass sich wiederum über ein Protokoll lösen lassen
 würde, ist dass ein channelClose nicht an den Gesprächspartner übermittelt
 wird.
 
\end_layout

\end_body
\end_document
