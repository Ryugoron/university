#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
Technische Informatik IV: Praktikum
\end_layout

\begin_layout Author
Protokoll zu Aufgabe A6
\end_layout

\begin_layout Date
von Max Wisniewski, Alexander Steen
\end_layout

\begin_layout Subsection*
Vorbereitung
\end_layout

\begin_layout Standard
Zur Vorbereitung der Programmierung haben wir uns mit der 
\emph on
C-Einführung OpenAT
\emph default
 sowie dem 
\emph on
ADL User Guide
\emph default
 auseinandergesetzt.
 Für diese Aufgabe ist dabei insbesondere die Sektion 
\emph on
Timers
\emph default
 von Relevanz.
 
\end_layout

\begin_layout Subsection*
Aufgaben
\end_layout

\begin_layout Enumerate
Programm schreiben, welches einen Text über die serielle Schittstelle ausgibt.
\end_layout

\begin_layout Enumerate
Programm modifizieren, sodass es den Text zehnmal ausgibt.
\end_layout

\begin_layout Enumerate
Programm modifizieren, sodass es den Text zehnmal mit einem Abstand von
 jeweils 10 Sekunden ausgibt
\end_layout

\begin_layout Subsection*
Dokumentation
\end_layout

\begin_layout Description
adl_atSendResponse Diese Funktion sendet eine Nachricht über die serielle
 Schnittstelle.
\begin_inset Newline newline
\end_inset


\family typewriter
s32 adl_atSendResponse(u16 Typ, ascii * Nachricht)
\family default

\begin_inset Newline newline
\end_inset

wobei der Nachrichten-Typ für unsere Zwecke entweder 
\family typewriter
ADL_AT_UNS
\family default
 für spontane Nachrichten oder 
\family typewriter
ADL_AT_RSP
\family default
 für Antworten ist.
 Damit wird der Text der Nachricht an die Standardausgabe geschickt.
\end_layout

\begin_layout Description
adl_tmrSubscribe Diese Funktion registriert einen Timer.
 Folgende Parameter sind zu verwenden:
\begin_inset Newline newline
\end_inset


\family typewriter
\size scriptsize
adl_tmr_t * adl_tmrSubscribe(bool Zyklisch, u32 Verzögerung, adl_tmrType_e
 Timer-Typ, adl_tmrHandler_t Handler)
\family default
\size default

\begin_inset Newline newline
\end_inset

Wird der Timer Zyklisch angelegt (Parameter 
\family typewriter
true
\family default
) so registriert sich der Timer nach einem Aufruf der Callback-Funktion
 mit derselben Verzögerung erneut.
 Bei einem Timer-Typ von 
\family typewriter
ADL_TMR_TYPE_100MS
\family default
 ist die Verzögerung in 100 ms anzugeben.
\begin_inset Newline newline
\end_inset

Als Rückgabe erhält man einen Verweis auf den angelegten Timer.
 Der übergebene Handler muss vom Typ
\begin_inset Newline newline
\end_inset


\family typewriter
void (*) adl_tmrHandler_t (u8 Id, void * Context)
\family default

\begin_inset Newline newline
\end_inset

sein, wobei die 
\family typewriter
Id
\family default
 ein Verweis auf den Timer ist, der gerade abgelaufen ist.
\end_layout

\begin_layout Description
adl_tmrUnSubscribe Diees Funktion erlaubt es einem, einen Timer wieder zu
 deregistrieren.
\begin_inset Newline newline
\end_inset


\family typewriter
adl_tmrUnSubscribe(adl_tmr_t * Timer, adl_tmrHandler_t Handler, adl_tmrType_e
 Timer-Typ)
\family default

\begin_inset Newline newline
\end_inset

Dabei ist Timer der von der Subscribe-Funktion zurückgegebene Verweis auf
 den Timer.
\end_layout

\begin_layout Subsection*
Durchführung und Auswertung
\end_layout

\begin_layout Standard
Wir wählen für die folgenden Nachrichten den Nachrichten-Typ 
\family typewriter
ADL_AT_RSP
\family default
 aus, da dieser auf jeden Fall schnell auf dem Endgerät angezeigt wird.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void main_task (void) {
\end_layout

\begin_layout Plain Layout

	adl_atSendResponse (ADL_AT_RSP, "
\backslash
r
\backslash
nHollari-dudoedel-di
\backslash
r
\backslash
n");
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Testlauf
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

+GSM: Anmeldung im Netz abgeschlossen
\end_layout

\begin_layout Plain Layout

Hollari-dudoedel-di
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Im Folgenden realisieren wir die mehrfache Ausgabe derselben Nachricht über
 eine while-Schleife.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void main_task(void) {
\end_layout

\begin_layout Plain Layout

	u16 zaehler = 0;
\end_layout

\begin_layout Plain Layout

	while (zaehler++ < 10) {
\end_layout

\begin_layout Plain Layout

		adl_atSendResponse(ADL_AT_RSP, "
\backslash
r
\backslash
nHollari-dudoedel-di
\backslash
r
\backslash
n");	
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Testlauf
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

+GSM: Anmeldung im Netz abgeschlossen
\end_layout

\begin_layout Plain Layout

Hollari-dudoedel-di
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Hollari-dudoedel-di
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Hollari-dudoedel-di
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Um den Timer nach der richtigen Anzahl von Ausgaben zu entfernen, erstellen
 wir uns eine globale Variable 
\family typewriter
zaehler
\family default
, die die bisher ausgeführten Ausgaben zählt.
 Außerdem speichern wir global den Verweis auf den Timer.
 Diesen Verweis benutzen wir in dem Handler 
\family typewriter
ausgabe
\family default
, um uns nach der zehnten Ausgabe abzumelden.
 
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

u16 zaehler = 0;
\end_layout

\begin_layout Plain Layout

adl_tmr_t *timer_n;
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

void ausgabe(u8 event, void *context) {
\end_layout

\begin_layout Plain Layout

	if (zaehler++ < 10) {
\end_layout

\begin_layout Plain Layout

		adl_atSendResponse(ADL_AT_RSP, "
\backslash
r
\backslash
nHollari-dudoedel-di
\backslash
r
\backslash
n");	
\end_layout

\begin_layout Plain Layout

	} else { 
\end_layout

\begin_layout Plain Layout

		adl_tmrUnSubscribe(timer_n, ausgabe, ADL_TMR_TYPE_100MS);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Wir melden den Timer an:
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void main_task(void) { 
\end_layout

\begin_layout Plain Layout

	timer_n = adl_tmrSubscribe(
\end_layout

\begin_layout Plain Layout

		TRUE, // zyklisch 
\end_layout

\begin_layout Plain Layout

		100, ADL_TMR_TYPE_100MS, // 100 * 100ms = 10s 
\end_layout

\begin_layout Plain Layout

		ausgabe); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace smallskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Testlauf
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

+GSM: Anmeldung im Netz abgeschlossen
\end_layout

\begin_layout Plain Layout

Hollari-dudoedel-di
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Hollari-dudoedel-di
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

Hollari-dudoedel-di
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

...
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
Um einen Timer anzumelden, der einmalig nach 20 Sekunden seinen Handler
 ausführen soll, benutzen wir
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,language=C,tabsize=4"
inline false
status open

\begin_layout Plain Layout

adl_tmrSubscribe(FALSE, 200, ADL_TMR_TYPE_100MS, Handler)
\end_layout

\end_inset


\end_layout

\end_body
\end_document
