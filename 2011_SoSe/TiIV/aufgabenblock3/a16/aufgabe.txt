/************************************************************************************************
 * MAIN																							*
 ************************************************************************************************
 * Einstiegspunkte der Anwendung																*
 ************************************************************************************************/
#include "main.h"

//____DEKLARATIONEN______________________________________________________________________________
void main_task(void);
void sub_task1(void);

//____VARIABLEN__________________________________________________________________________________
wip_channel_t channel;
u8 counter = 0;
ascii buffer[64];
//____FUNKTIONEN_________________________________________________________________________________
void tcphandler(wip_event_t *event, void *ctx)
	{
	ascii read_buffer[2];
	switch (event->kind)
		{
		case WIP_CEV_OPEN:
			break;
		case WIP_CEV_READ:
			wip_read(event->channel, read_buffer, 2);
			if (wm_strcmp(read_buffer, "s") == 0)
				{
				led_on(0);
				led_off(1);
				led_off(2);
				led_off(3);
				}
			else if (wm_strcmp(read_buffer, "a") == 0)
				{
				led_on(1);
				led_off(2);
				led_off(3);
				led_off(0);
				}
			else if (wm_strcmp(read_buffer, "d") == 0)
				{
				led_on(2);
				led_off(3);
				led_off(0);
				led_off(1);
				}
			else if (wm_strcmp(read_buffer, "w") == 0)
				{
				led_on(3);
				led_off(0);
				led_off(1);
				led_off(2);
				}
			else
				{
				led_off(3);
				led_off(0);
				led_off(1);
				led_off(2);
				}
			break;
		case WIP_CEV_WRITE:
			break;
		case WIP_CEV_PEER_CLOSE:
			channel = wip_TCPClientCreateOpts("hwp.mi.fu-berlin.de", // Host
				50008, // Port
				tcphandler, // Handler
				NULL, WIP_COPT_PORT, 13337, WIP_COPT_END);
			break;
		case WIP_CEV_ERROR:
			wip_close(channel);
			channel = NULL;
			break;
		default:
			wip_close(channel);
			channel = NULL;
			ERROR("ERROR: Unkown TCP Event");
			break;
		}
	}

void gpshandler(fsa03_gprmc * data)
	{
	counter = (counter + 1) % 10;
	if (counter != 1)
		return;
	// Erzwinge Schnittstellen-Kompatibilität:
	ascii latitude[10];
	wm_strncpy(latitude, data->latitude, 9);
	latitude[9] = '\0';
	ascii longitude[11];
	wm_strncpy(latitude, data->latitude, 10);
	latitude[10] = '\0';

	//
	wm_sprintf(buffer, "%s%s,%s%s;", latitude, data->lat_dir, longitude, data->long_dir);

	adl_atSendResponse(ADL_AT_RSP, "Daten: \r\n");
	adl_atSendResponse(ADL_AT_RSP, buffer);
	adl_atSendResponse(ADL_AT_RSP, "\r\n");
	adl_atSendResponse(ADL_AT_RSP, "Gesamtdaten: \r\n");
	adl_atSendResponse(ADL_AT_RSP, data->message);
	adl_atSendResponse(ADL_AT_RSP, "\r\n\r\n");
	if (wm_strcmp(data->status, "V") == 0)
		return;
	if (channel)
		{
		adl_atSendResponse(ADL_AT_RSP, "Schicken Daten auf TCP: \r\n");
		wip_write(channel, buffer, 25);
		}
	else
		{
		channel = wip_TCPClientCreateOpts("hwp.mi.fu-berlin.de", // Host
			50008, // Port
			tcphandler, // Handler
			NULL, WIP_COPT_PORT, 13337, WIP_COPT_END);
		}
	}

/*
 * Hauptask der Anwendung (volle ADL Funktionalität)
 */
//===============================================================================================
void main_task(void)
//===============================================================================================
	{
	//led_init();
	channel = wip_TCPClientCreateOpts("hwp.mi.fu-berlin.de", // Host
		50008, // Port
		tcphandler, // Handler
		NULL, WIP_COPT_PORT, 13337, WIP_COPT_END);
	fsa03_enable(TRUE);
	fsa03_subscribe(gpshandler);
	}

/*
 * Nebenläufiger Task der Anwendung (eingeschränkte ADL Funktionalität)
 */
//===============================================================================================
void sub_task1(void)
//===============================================================================================
	{
	// Anwendercode ...
	}
