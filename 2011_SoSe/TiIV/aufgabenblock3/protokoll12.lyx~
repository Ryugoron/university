#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry true
\use_amsmath 1
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 3cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Technische Informatik IV: Praktikum
\end_layout

\begin_layout Author
Protokoll zu Aufgabe A12
\end_layout

\begin_layout Date
Max Wisniewski, Alexander Steen
\end_layout

\begin_layout Subsection*
Vorbereitung
\end_layout

\begin_layout Standard
Zur Vorbereitung haben wir den Abschnitt Socket Layer des 
\emph on
WIP Development Guide
\emph default
 gelesen und die Datei 
\emph on
tcp.c
\emph default
 aus dem Rahmenwerk studiert.
 Um die GPRS-Funktionalitäten nutzen zu können, wurde in der 
\emph on
config.h
\emph default
 
\family typewriter
INIT_GPRS
\family default
 aktiviert und dann ein clean build des Projekts gemacht.
\end_layout

\begin_layout Subsection*
Aufgaben
\end_layout

\begin_layout Enumerate
Befehl 
\family typewriter
AT+ECHO
\family default
 erstellen
\end_layout

\begin_layout Enumerate
Erweitern, sodass Tastenbetätigungen via TCP verschickt werden
\end_layout

\begin_layout Subsection*
Dokumentation
\end_layout

\begin_layout Description
wip_TCPClientCreateOpts Diese Funktion erstellt ein neues TCP-Socket, bindet
 es direkt an den angegebenen lokalen Port und verbindet sich mit den angegebene
n Host (+Port).
 Die Syntax lautet:
\begin_inset Newline newline
\end_inset


\family typewriter
wip_TCPClientCreateOpts ( const ascii *serverAddr, u16 serverPort, wip_eventHand
ler_f evHandler, void *userdata, ...
 );
\family default

\begin_inset Newline newline
\end_inset

Dabei bedeuten die Parameter (in der Reihenfolge): Adresse (IP oder Hostname)
 des Zielrechners; Port des Zielrechners; Eventhandler, der bei einem TCP-Event
 auf diesem Socket aufgerufen werden soll; etwaige Userdata, die jedes Mal
 beim Aufruf des Handlers mitgegeben werden soll.
\begin_inset Newline newline
\end_inset

Anschließend kann man am Ende des Kommandos eine Reihe von Parameter-Konstanten
 der Form 
\family typewriter
WIP_COPT_X
\family default
 angeben, wobei die Auflistung mit 
\family typewriter
WIP_COPT_END
\family default
 enden muss.
 Üblich ist z.B.
 der Parameter 
\family typewriter
WIP_COPT_PORT
\family default
 gefolgt von einer Ganzzahl, die angibt, an welchen lokalen Port das Socket
 gebunden werden soll.
 Die Funktion gibt einen Zeiger auf den erzeugten Socketkanal zurück.
\end_layout

\begin_layout Description
wip_read Diese Funktion versucht aus dem übergebenen Socketkanal eine Zahl
 von Bytes in einen ebenfalls übergebenen Puffer zu lesen.
 Falls das erfolgreich war, gibt die Funktion die Anzahl der tatsächlich
 gelesenen Bytes zurück.
 Im Fehlerfall eine negative Zahl.
 Die Syntax ist:
\begin_inset Newline newline
\end_inset


\family typewriter
wip_read ( wip_channel_t c, void *buffer, u32 buf_len );
\end_layout

\begin_layout Description
wip_write Die Funktion funktioniert analog zu 
\family typewriter
wip_read
\family default
.
 Hier wird versucht eine bestimmte Anzahl von Bytes aus einem Puffer zu
 schreiben.
 Die Funktion gibt die Anzahl der tatsächlich geschriebenen Bytes zurück
 - oder im Fehlerfall eine negative Zahl.
\end_layout

\begin_layout Subsection*
Durchführung und Auswertung
\end_layout

\begin_layout Standard
Um den TCP-Kanal, den wir bei einem 
\family typewriter
ECHO
\family default
-Kommando öffnen werden, global ansprechen zu können, speichern wir diesen
 global in der Variable 
\family typewriter
channel
\family default
.
 Da wir nicht für jedes 
\family typewriter
ECHO
\family default
-Kommando einen neuen Socket erstellen wollen, merken wir uns außerdem über
 die globale boolesche Variable 
\family typewriter
channel_open
\family default
, ob bereits ein Socket erstellt wurde.
 So können wir den bereits erzeugten Socket benutzen.
 Außerdem arbeiten wir mit einem globalen Sendepuffer, da wir eventuell
 nicht direkt im Kommando-Handler von 
\family typewriter
ECHO
\family default
 senden können (genaueres später).
 Die Größe des Puffers haben wir eher willkürlich gewählt.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

wip_channel_t channel;
\end_layout

\begin_layout Plain Layout

ascii sendbuffer[256];
\end_layout

\begin_layout Plain Layout

bool channel_open;
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Wird die Applikation gestartet, so wird das Befehl 
\family typewriter
AT+ECHO
\family default
 angelegt und mit dem Callback 
\family typewriter
echoHandler
\family default
 vverknüpft.
 Das Kommando wird Parameter akzeptieren - nämlich genau eins: Den String,
 der vom Host zurückgeschickt werden soll.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void main_task(void) {
\end_layout

\begin_layout Plain Layout

	channel_open = false;
\end_layout

\begin_layout Plain Layout

	// Kommando anlegen
\end_layout

\begin_layout Plain Layout

	adl_atCmdSubscribe("AT+ECHO", echoHandler,
\end_layout

\begin_layout Plain Layout

					ADL_CMD_TYPE_PARA | 0x0011); 
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Der Handler für das 
\family typewriter
ECHO
\family default
-Kommando holt sich nun den Parameter (also den zu sendenden String).
 Ist schon ein TCP-Socket geöffnet, so können wir einfach den Befehl 
\family typewriter
wip_write
\family default
 nutzen, um den String in den Socket zu schreiben.
 Ist das nicht der Fall, so muss ein Socket geöffnet werden.
 Dies setzen wir mit dem Befehl 
\family typewriter
wip_TCPClientCreateOpts
\family default
 (siehe Dokumentation oben) um, und setzen die Parameter entsprechend unseres
 Hostes und Ports.
 Dem Socket übergeben wir einen Eventhandler 
\family typewriter
echo_response
\family default
, der auf TCP-Events reagiert.
 Da wir nach dem Aufruf von 
\family typewriter
wip_TCPClientCreateOpts
\family default
 noch nicht sicher sein können, dass der Kanal bereits geöffnet ist, speichern
 wir am Anfang der Funktion den String in den globalen Buffer.
 Nun kann von dem TCP-Eventhandler der Sendepuffer verschickt werden, sobald
 der Socket offen ist.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void echoHandler(adl_atCmdPreParser_t *param) { 
\end_layout

\begin_layout Plain Layout

	if (param->Type == ADL_CMD_TYPE_PARA) {
\end_layout

\begin_layout Plain Layout

		wm_strGetParameterString(sendbuffer, param->StrData, 1);
\end_layout

\begin_layout Plain Layout

		// Socket erstellen
\end_layout

\begin_layout Plain Layout

		if(!channel_open){
\end_layout

\begin_layout Plain Layout

			channel = wip_TCPClientCreateOpts (
\end_layout

\begin_layout Plain Layout

						"hwp.mi.fu-berlin.de",	// Host
\end_layout

\begin_layout Plain Layout

						50008,					// Port
\end_layout

\begin_layout Plain Layout

						echo_response,			// Handler
\end_layout

\begin_layout Plain Layout

						NULL, 
\end_layout

\begin_layout Plain Layout

						WIP_COPT_PORT, 13338,
\end_layout

\begin_layout Plain Layout

						WIP_COPT_END);
\end_layout

\begin_layout Plain Layout

		}else{
\end_layout

\begin_layout Plain Layout

			// Bereits erstellt, direkt senden
\end_layout

\begin_layout Plain Layout

			wip_write(channel, sendbuffer, 256);
\end_layout

\begin_layout Plain Layout

		}
\end_layout

\begin_layout Plain Layout

		adl_atSendResponse(ADL_AT_RSP, "
\backslash
r
\backslash
nOK
\backslash
r
\backslash
n");
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Bei dem TCP-Eventhandler haben wir uns an dem Beispielcode orientiert und
 den Handler als großen 
\family typewriter
switch
\family default
-Block entworfen, in dem wir unterscheiden, was für ein Event gerade passiert
 ist.
 Wurde der Kanal gerade geöffnet, so muss noch die im globalen Puffer wartende
 Nachricht verschickt werden.
 Bekommen wir eine Nachricht, so speichern wir diese Zeichen für Zeichen
 in einem lokalen Puffer und geben diese dann auf der Konsole aus.
 Sollte ein Fehler auftreten oder der Kanal von der Gegenseite geschlossen
 werden, schließen wir den Socket.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void echo_response(wip_event_t *event, void *ctx){
\end_layout

\begin_layout Plain Layout

	s32 answer;
\end_layout

\begin_layout Plain Layout

	ascii buffer[256];
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout

	switch(event->kind){
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_OPEN:
\end_layout

\begin_layout Plain Layout

			// Socket frisch geöffnet, wartende Nachricht schicken
\end_layout

\begin_layout Plain Layout

			channel_open = true;
\end_layout

\begin_layout Plain Layout

			wip_write(channel, sendbuffer, 256);
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_READ:
\end_layout

\begin_layout Plain Layout

			// Wir erhalten eine Nachricht, ausgeben:
\end_layout

\begin_layout Plain Layout

			do {
\end_layout

\begin_layout Plain Layout

				answer = wip_read (event->channel, buffer, sizeof (buffer) - 1);
\end_layout

\begin_layout Plain Layout

				buffer[answer] = '
\backslash
0';
\end_layout

\begin_layout Plain Layout

				// Terminieren, falls es ein String ist
\end_layout

\begin_layout Plain Layout

				adl_atSendResponse(ADL_AT_RSP,buffer);
\end_layout

\begin_layout Plain Layout

			} while (answer == sizeof (buffer) - 1);
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_WRITE:
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_PEER_CLOSE:
\end_layout

\begin_layout Plain Layout

		case WIP_CEV_ERROR:
\end_layout

\begin_layout Plain Layout

			wip_close(channel);
\end_layout

\begin_layout Plain Layout

			channel_open = false;
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

		default:
\end_layout

\begin_layout Plain Layout

			wip_close(channel);
\end_layout

\begin_layout Plain Layout

			channel_open = false;
\end_layout

\begin_layout Plain Layout

			ERROR("ERROR: Unkown TCP Event");
\end_layout

\begin_layout Plain Layout

			break;
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Damit ist die Grundfunktionalität hergestellt und 
\family typewriter
AT+ECHO
\family default
 verschickt einen String, der wieder ausgegeben wird, sobald er wieder empfangen
 wird.
\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Testlauf:
\series default

\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

+INFO: Startgrund - Normaler Start
\end_layout

\begin_layout Plain Layout

+GSM: Warte auf Anmeldung im Netz
\end_layout

\begin_layout Plain Layout

+GSM: Anmeldung im Netz abgeschlossen
\end_layout

\begin_layout Plain Layout

+GPRS: Warte auf Verbindung
\end_layout

\begin_layout Plain Layout

+GPRS: Verbindung wurde hergestellt
\end_layout

\begin_layout Plain Layout

AT+ECHO="Hallo"
\end_layout

\begin_layout Plain Layout

OK
\end_layout

\begin_layout Plain Layout

Hallo
\end_layout

\begin_layout Plain Layout

AT+ECHO="Test"
\end_layout

\begin_layout Plain Layout

OK
\end_layout

\begin_layout Plain Layout

Test
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Nun modifizieren wir das Programm noch so, dass bei einem Tastendruck eine
 entsprechende Nachricht via Socket geschickt wird.
 Dafür modifizieren wir die main so, dass Key-Nachrichten aktiviert werden
 und ein Handler auf die Nachrichten reagiert.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

void main_task(void) {
\end_layout

\begin_layout Plain Layout

	channel_open = false;
\end_layout

\begin_layout Plain Layout

	// Kommando anlegen
\end_layout

\begin_layout Plain Layout

	adl_atCmdSubscribe("AT+ECHO", echoHandler,
\end_layout

\begin_layout Plain Layout

					ADL_CMD_TYPE_PARA | 0x0011); 
\end_layout

\begin_layout Plain Layout

	// Key-Nachrichten aktivieren
\end_layout

\begin_layout Plain Layout

	adl_atCmdCreate("AT+CMER=,1", FALSE, (adl_atRspHandler_t) NULL, NULL);
\end_layout

\begin_layout Plain Layout

	// Keyhandler anlegen
\end_layout

\begin_layout Plain Layout

	adl_atUnSoSubscribe("+CKEV:", (adl_atUnSoHandler_t) keyhandler);
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Dieser Keyhandler liest einfach aus, welche Taste gedrückt wurde und schickt
 dann einen String der Form 
\begin_inset Quotes eld
\end_inset

Taste <Nr>
\begin_inset Quotes erd
\end_inset

 via Socket.
 Das Vorgehen ist dabei analog zu 
\family typewriter
echoHandler
\family default
.
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

bool keyhandler(adl_atUnsolicited_t *paras) {
\end_layout

\begin_layout Plain Layout

	ascii param1[1];
\end_layout

\begin_layout Plain Layout

	// parameter auslesen
\end_layout

\begin_layout Plain Layout

	wm_strGetParameterString(param1, paras->StrData, 1);
\end_layout

\begin_layout Plain Layout

	// String zusammenbauen
\end_layout

\begin_layout Plain Layout

	wm_sprintf(sendbuffer, "Taste %s",param1);
\end_layout

\begin_layout Plain Layout

	if(!channel_open){
\end_layout

\begin_layout Plain Layout

			//Socket erstellen
\end_layout

\begin_layout Plain Layout

			channel = wip_TCPClientCreateOpts (
\end_layout

\begin_layout Plain Layout

						"hwp.mi.fu-berlin.de",	// Host
\end_layout

\begin_layout Plain Layout

						50008,					// Port
\end_layout

\begin_layout Plain Layout

						echo_response,			// Handler
\end_layout

\begin_layout Plain Layout

						NULL, 
\end_layout

\begin_layout Plain Layout

						WIP_COPT_PORT, 13338,
\end_layout

\begin_layout Plain Layout

						WIP_COPT_END);
\end_layout

\begin_layout Plain Layout

	}else{
\end_layout

\begin_layout Plain Layout

		// Bereits erstellen, direkt senden
\end_layout

\begin_layout Plain Layout

		wip_write(channel, sendbuffer, 256);
\end_layout

\begin_layout Plain Layout

	}
\end_layout

\begin_layout Plain Layout

	return FALSE;
\end_layout

\begin_layout Plain Layout

}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard

\series bold
Testlauf:
\series default

\begin_inset listings
lstparams "basicstyle={\small\ttfamily},frame=single,tabsize=4"
inline false
status open

\begin_layout Plain Layout

...
\end_layout

\begin_layout Plain Layout

+INFO: Startgrund - Normaler Start
\end_layout

\begin_layout Plain Layout

+GSM: Warte auf Anmeldung im Netz
\end_layout

\begin_layout Plain Layout

+GSM: Anmeldung im Netz abgeschlossen
\end_layout

\begin_layout Plain Layout

+GPRS: Warte auf Verbindung
\end_layout

\begin_layout Plain Layout

+GPRS: Verbindung wurde hergestellt
\end_layout

\begin_layout Plain Layout

AT+ECHO="Hallo"
\end_layout

\begin_layout Plain Layout

OK
\end_layout

\begin_layout Plain Layout

Hallo
\end_layout

\begin_layout Plain Layout

Taste 2
\end_layout

\begin_layout Plain Layout

Taste 2
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset VSpace defskip
\end_inset


\end_layout

\begin_layout Standard
Hier haben wir die Taste 2 betätigt und erhalten zwei mal die Antwort (je
 einmal für Drücken und Loslassen).
\end_layout

\begin_layout Standard
Wenn wir über die Telnetkonsole auf Port 50018 Zeichen eingeben, werden
 sie direkt im Developer Studio ausgegeben (Wenn wir vorher das Socket geöffnet
 haben, durch 
\family typewriter
ECHO
\family default
 oder Tastendruck).
\end_layout

\end_body
\end_document
